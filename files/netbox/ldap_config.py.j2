import ldap
from django_auth_ldap.config import LDAPSearch, NestedGroupOfNamesType

# Server URI
AUTH_LDAP_SERVER_URI = "ldap://elara.het.nue.de.n0emis.eu"

# The following may be needed if you are binding to Active Directory.
AUTH_LDAP_CONNECTION_OPTIONS = {
ldap.OPT_REFERRALS: 0
}

# Set the DN and password for the NetBox service account.
AUTH_LDAP_BIND_DN = "{{ ldap_dm_user}}"
AUTH_LDAP_BIND_PASSWORD = "{{ ldap_dm_password }}"

# Include this setting if you want to ignore certificate errors. This might be needed to accept a self-signed cert.
# Note that this is a NetBox-specific setting which sets:
#     ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
LDAP_IGNORE_CERT_ERRORS = True

# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's
# username is not in their DN (Active Directory).
AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=People,dc=n0emis,dc=eu",
ldap.SCOPE_SUBTREE,
"(uid=%(user)s)")

# If a user's DN is producible from their username, we don't need to search.
AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,ou=People,dc=n0emis,dc=eu"

# You can map user attributes to Django attributes as so.
AUTH_LDAP_USER_ATTR_MAP = {
"first_name": "givenName",
"last_name": "sn",
"email": "mail"
}

# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group
# hierarchy.
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("ou=Groups,dc=n0emis,dc=eu", ldap.SCOPE_SUBTREE,
"(objectClass=groupOfNames)")
AUTH_LDAP_GROUP_TYPE = NestedGroupOfNamesType()

# Define a group required to login.
#AUTH_LDAP_REQUIRE_GROUP = "CN=NETBOX_USERS,DC=example,DC=com"

# Mirror LDAP group assignments.
AUTH_LDAP_MIRROR_GROUPS = True

# Define special user types using groups. Exercise great caution when assigning superuser status.
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#    "is_active": "cn=active,ou=groups,dc=example,dc=com",
"is_staff": "cn=admins,ou=Groups,dc=n0emis,dc=eu",
"is_superuser": "cn=admins,ou=Groups,dc=n0emis,dc=eu"
}

# For more granular permissions, we can map LDAP groups to Django groups.
AUTH_LDAP_FIND_GROUP_PERMS = True

# Cache groups for one hour to reduce LDAP traffic
AUTH_LDAP_CACHE_TIMEOUT = 3600

AUTH_LDAP_AUTHORIZE_ALL_USERS = True


import logging
from django.conf import settings
from netbox.authentication import RemoteUserBackend
from django_auth_ldap.backend import LDAPBackend, LDAPSettings

class AuthBackend(RemoteUserBackend):
    def __init__(self, *args, **kwargs):
        self.ldap_backend = LDAPBackend()

        settings = LDAPSettings()
        for param in globals():
            if param.startswith(settings._prefix):
                setattr(settings, param[10:], globals().get(param))

        self.ldap_backend.settings = settings

        # Optionally disable strict certificate checking
        if globals().get('LDAP_IGNORE_CERT_ERRORS', False):
            ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)

        # Enable logging for django_auth_ldap
        ldap_logger = logging.getLogger('django_auth_ldap')
        ldap_logger.addHandler(logging.StreamHandler())
        ldap_logger.setLevel(logging.INFO)

        return super().__init__(*args, **kwargs)


    def authenticate(self, request, remote_user):
        self.ldap_backend.populate_user(remote_user)

        return super().authenticate(request, remote_user)
