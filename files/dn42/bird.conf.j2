################################################
#               Variable header                #
################################################

define OWNAS =  {{ dn42_local_as }};
define OWNIP =  {{ dn42_local_v4 }};
define OWNIPv6 = {{ dn42_local_v6 }};
define OWNNET = {{ dn42_local_subnet_v4 }};
define OWNNETv6 = {{ dn42_local_subnet_v6 }};
define OWNNETv6_2 = {{ dn42_local_subnet_v6_2 }};
define OWNNETSET = [{{ dn42_local_subnet_v4 }}+];
define OWNNETSETv6 = [{{ dn42_local_subnet_v6 }}+, {{ dn42_local_subnet_v6_2 }}+];
define DN42_REGION = {{ dn42_region }};

################################################
#                 Header end                   #
################################################

ipv4 table dn42_v4;
ipv6 table dn42_v6;

/*
 *  Utility functions
 */

function is_self_dn42_net() {
  return net ~ OWNNETSET;
}

function is_self_dn42_net_v6() {
  return net ~ OWNNETSETv6;
}

function is_valid_dn42_network() {
  return net ~ [
    172.20.0.0/14{21,29}, # dn42
    172.20.0.0/24{28,32}, # dn42 Anycast
    172.21.0.0/24{28,32}, # dn42 Anycast
    172.22.0.0/24{28,32}, # dn42 Anycast
    172.23.0.0/24{28,32}, # dn42 Anycast
    172.31.0.0/16+,       # ChaosVPN
    10.100.0.0/14+,       # ChaosVPN
    10.127.0.0/16{16,32}, # neonetwork
    10.0.0.0/8{15,24}     # Freifunk.net
  ];
}

{% if dn42_enable_roa %}
roa4 table dn42_roa;
roa6 table dn42_roa_v6;

protocol static {
    roa4 { table dn42_roa; };
    include "{{ dn42_roa_v4_location }}";
};

protocol static {
    roa6 { table dn42_roa_v6; };
    include "{{ dn42_roa_v6_location }}";
};
{% endif %}

function is_valid_dn42_network_v6() {
  return net ~ [
    fd00::/8{44,64} # ULA address space as per RFC 4193
  ];
}

{% if dn42_kernel | default(true) %}
protocol kernel {
    scan time 20;

    ipv6 {
        table dn42_v6;
        import none;
        export filter {
            if source = RTS_STATIC then reject;
            krt_prefsrc = OWNIPv6;
            accept;
        };
    };
{% if dn42_configure_linux_network_table %}
    kernel table 42;
{% endif %}
};

protocol kernel {
    scan time 20;

    ipv4 {
        table dn42_v4;
        import none;
        export filter {
            if source = RTS_STATIC then reject;
            krt_prefsrc = OWNIP;
            accept;
        };
    };
{% if dn42_configure_linux_network_table %}
    kernel table 42;
{% endif %}
}
{% endif %}

protocol static {
    route OWNNET reject;

    ipv4 {
        table dn42_v4;
        import all;
        export none;
    };
}

protocol static {
    route OWNNETv6 reject;
    route OWNNETv6_2 reject;

    ipv6 {
        table dn42_v6;
        import all;
        export none;
    };
}

template bgp dnpeers {
    router id OWNIP;

    local as OWNAS;
    path metric 1;
}

{% if dn42_collector | default(false) %}
protocol bgp dn42_collector {
    router id OWNIP;

    local as OWNAS;
    neighbor fd42:4242:2601:ac12::1 as 4242422602;

    # enable multihop as the collector is not locally connected
    multihop;

    ipv4 {
        table dn42_v4;
        # export all available paths to the collector
        add paths tx;

        import none;
        export filter {
            if ( is_valid_dn42_network() && source ~ [ RTS_STATIC, RTS_BGP ] )
            then {
                accept;
            }
            reject;
        };
    };

    ipv6 {
        table dn42_v6;
        # export all available paths to the collector
        add paths tx;

        # import/export filters
        import none;
        export filter {
            # export all valid routes
            if ( is_valid_dn42_network_v6() && source ~ [ RTS_STATIC, RTS_BGP ] )
            then {
                accept;
            }
            reject;
        };
    };
}
{% endif %}

function update_latency(int link_latency) {
    bgp_community.add((64511, link_latency));
    if (64511, 9) ~ bgp_community then { bgp_community.delete([(64511, 1..8)]); return 9; }
    else if (64511, 8) ~ bgp_community then { bgp_community.delete([(64511, 1..7)]); return 8; }
    else if (64511, 7) ~ bgp_community then { bgp_community.delete([(64511, 1..6)]); return 7; }
    else if (64511, 6) ~ bgp_community then { bgp_community.delete([(64511, 1..5)]); return 6; }
    else if (64511, 5) ~ bgp_community then { bgp_community.delete([(64511, 1..4)]); return 5; }
    else if (64511, 4) ~ bgp_community then { bgp_community.delete([(64511, 1..3)]); return 4; }
    else if (64511, 3) ~ bgp_community then { bgp_community.delete([(64511, 1..2)]); return 3; }
    else if (64511, 2) ~ bgp_community then { bgp_community.delete([(64511, 1..1)]); return 2; }
    else return 1;
}

function update_bandwidth(int link_bandwidth) {
    bgp_community.add((64511, link_bandwidth));
    if (64511, 21) ~ bgp_community then { bgp_community.delete([(64511, 22..29)]); return 21; }
    else if (64511, 22) ~ bgp_community then { bgp_community.delete([(64511, 23..29)]); return 22; }
    else if (64511, 23) ~ bgp_community then { bgp_community.delete([(64511, 24..29)]); return 23; }
    else if (64511, 24) ~ bgp_community then { bgp_community.delete([(64511, 25..29)]); return 24; }
    else if (64511, 25) ~ bgp_community then { bgp_community.delete([(64511, 26..29)]); return 25; }
    else if (64511, 26) ~ bgp_community then { bgp_community.delete([(64511, 27..29)]); return 26; }
    else if (64511, 27) ~ bgp_community then { bgp_community.delete([(64511, 28..29)]); return 27; }
    else if (64511, 28) ~ bgp_community then { bgp_community.delete([(64511, 29..29)]); return 28; }
    else return 29;
}

function update_crypto(int link_crypto) {
    bgp_community.add((64511, link_crypto));
    if (64511, 31) ~ bgp_community then { bgp_community.delete([(64511, 32..34)]); return 31; }
    else if (64511, 32) ~ bgp_community then { bgp_community.delete([(64511, 33..34)]); return 32; }
    else if (64511, 33) ~ bgp_community then { bgp_community.delete([(64511, 34..34)]); return 33; }
    else return 34;
}

function update_flags(int link_latency; int link_bandwidth; int link_crypto)
int dn42_latency;
int dn42_bandwidth;
int dn42_crypto;
{
    if (dn42_latency != 0) then {
        dn42_latency = update_latency(link_latency);
    }
    if (dn42_bandwidth != 0) then {
        dn42_bandwidth = update_bandwidth(link_bandwidth) - 20;
        # replace 4 with your calculated bandwidth value
        if dn42_bandwidth > 4 then dn42_bandwidth = 4;
    }
    if (dn42_crypto != 0) then {
        dn42_crypto = update_crypto(link_crypto) - 30;
    }

    return true;
}

# Combines filter from local4.conf/local6.conf and filter4.conf/filter6.conf,
# which means, these must included before this file

function dn42_import_filter(int link_latency; int link_bandwidth; int link_crypto) {
    if net.type = NET_IP4 && is_valid_dn42_network() && !is_self_dn42_net() then {
        if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then {
            print "[dn42] ROA check failed for ", net, " - AS ", bgp_path.last;
            reject;
        }
    } else if net.type = NET_IP6 && is_valid_dn42_network_v6() && !is_self_dn42_net_v6() then {
        if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
            print "[dn42] ROA check failed for ", net, " - AS ", bgp_path.last;
            reject;
        }
    } else {  # Invalid IP or unknown net type
        reject;
    }

    update_flags(link_latency, link_bandwidth, link_crypto);
    accept;
}

function dn42_export_filter(int link_latency; int link_bandwidth; int link_crypto) {
    if (is_valid_dn42_network() || is_valid_dn42_network_v6()) then {
        if source = RTS_STATIC then {
            bgp_community.add((64511, DN42_REGION));
        }

        update_flags(link_latency, link_bandwidth, link_crypto);
        accept;
    }
    reject;
}

include "{{ dn42_bird2_directory }}/peers/*";
